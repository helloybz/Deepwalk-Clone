{"version":3,"sources":["components/Header/Header.js","components/Body/Plot.js","components/Body/data.js","components/Body/Content.js","components/Body/Body.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["Header","AppBar","position","sx","backgroundImage","bgcolor","borderBottomStyle","borderBottomWidth","borderBottomColor","Toolbar","Typography","fontSize","fontWeight","color","cursor","onClick","window","location","href","Plot","data","title","theme","useTheme","width","height","chartType","options","titleTextStyle","legend","textStyle","backgroundColor","palette","background","dark","colors","hAxis","divider","viewWindow","max","min","vAxis","plot","Content","type","content","language","sentences","kor","split","eng","Grid","container","component","List","map","sentence","i","item","xs","ListItem","paragraphs","paragraph","Body","useState","set_language","Box","Fab","bottom","lg","right","zIndex","md","lineHeight","marginBottom","Button","marginLeft","borderStyle","borderWidth","borderColor","borderRadius","GitHub","zachary","section","variant","header","App","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","mode","primary","main","default","text","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.298e5f57.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nexport function Header() {\n    return (\n        <Box>\n            <AppBar position=\"fixed\"\n                sx={{\n                    backgroundImage: 'none',\n                    bgcolor: 'background.dark',\n                    borderBottomStyle: 'solid',\n                    borderBottomWidth: '1px',\n                    borderBottomColor: 'divider.dark',\n                }}>\n                <Toolbar>\n                    <Typography\n                        sx={{\n                            fontSize: 'h5.fontSize',\n                            fontWeight: '600',\n                            color: 'text.dark',\n                            \":hover\": {\n                                cursor: \"pointer\",\n                            }\n                        }}\n                        onClick={() => (window.location.href = '/')}\n                    >\n                        helloybz.\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </Box >\n    )\n}","import { useTheme } from '@mui/material';\nimport Chart from 'react-google-charts';\n\nexport function Plot({ data, title }) {\n    const theme = useTheme()\n    return (\n        <Chart\n            width={'100%'}\n            height={'100%'}\n            chartType=\"ScatterChart\"\n            data={data}\n            options={{\n                title: title,\n                titleTextStyle: {\n                    color: \"white\",\n                },\n                legend: {\n                    position: \"right\",\n                    textStyle: { color: 'white', fontSize: \"2rem\" },\n                },\n                backgroundColor: theme.palette.background.dark,\n                colors: [\"magenta\", \"yellow\", \"grey\", \"cyan\"],\n                hAxis: {\n                    \"gridlines\": {\n                        \"color\": theme.palette.divider.dark,\n                    },\n                    \"minorGridlines\": {\n                        \"color\": theme.palette.divider.dark,\n                    },\n                    \"baseline\": {\n                        \"color\": theme.palette.divider.dark,\n                    },\n                    viewWindow: {\n                        max: 1.5,\n                        min: -4,\n                    },\n                },\n                vAxis: {\n                    \"gridlines\": {\n                        \"color\": theme.palette.divider.dark,\n                    },\n                    \"minorGridlines\": {\n                        \"color\": theme.palette.divider.dark,\n                    },\n                    \"baseline\": {\n                        \"color\": theme.palette.divider.dark,\n                    },\n                    viewWindow: {\n                        max: 2.5,\n                        min: -2,\n                    },\n                }\n            }}\n        />)\n}","export const data = [\n    {\n        \"header\": {\n            'eng': 'Introduction',\n            'kor': '프로젝트 소개'\n        },\n        \"content\": {\n            'type': 'list',\n            'eng': `\\\n                Implements Deepwalk algorithm based on the original paper without reference to the original source code.\n                Focused on implementing the same Deepwalk described in the paper.\n                Compared with the original Deepwalk by node classification experiment.\n                PyTorch is mainly used for this implementation.`,\n            'kor': `\\\n                Deepwalk 논문을 구현한 프로젝트입니다.\n                본 논문에서 서술한 내용을 가능한 충실히 구현했습니다.\n                얼마나 정확히 구현했는지 측정하기 위해서 Deepwalk와 성능을 비교하는 실험을 했습니다.\n                PyTorch를 이용해 구현했습니다.`,\n        }\n    },\n    {\n        \"header\": {\n            'eng': 'Understanding Deepwalk',\n            'kor': 'Deepwalk 이해하기',\n        },\n        \"content\": {\n            'type': 'paragraphs',\n            'eng': `\\\n                Deepwalk is one of the most popular node embedding algorithms.\\\n                The algorithm consists of two parts: 1) populating random walks from a given network and 2) running Skipgram.\\\n                \n                Given a network, we can think of a random walk starting from a random node in the network.\\\n                The network's structural information around the starting node is incorporated in the random walk.\\\n                If a bunch of random walks are populated, starting from any random nodes, \\\n                we can think that the network's entire structural information is almost captured in them.\\\n\n                Deepwalk considers the random walks as sentences and the nodes in them as words, \\\n                and then applies Skipgram, a language modeling algorithm, to the random walks.\\\n                Skipgram's objective function is a likelihood of the nodes' vector representation given their adjacent nodes.\\\n\n                But the function is not feasible due to the expensive time complexity for \\\n                computing the probability of collocation for the every node.\\\n                By adopting hierarchical softmax for that, the time complexity reduces to logarithms scale.\\\n                After maximizing this objective function, the vector representations of the nodes are optimized to be incorporating the network's structure.\\\n                `,\n            'kor': `\\\n                Deepwalk는 대표적인 node embedding 알고리즘 중 하나입니다.\\\n                Deepwalk 알고리즘은 크게 두 부분으로 이루어져 있습니다.\\\n                첫째는 주어진 네트워크에서 Random Walk 샘플들을 많이 확보하는 것이고, 둘째는 Skipgram을 적용하는 것입니다.\\\n\n                어떤 네트워크가 주어졌을 때, 그 네트워크에서 아무 Node를 하나 골라서 그 Node에서 시작하는 Random Walk를 한번 시행했다고 생각해보겠습니다.\\\n                그 하나의 Random Walk 샘플에는 그 Node 주변의 구조적인 정보가 담겨있습니다.\\\n                만약 이런 과정을 모든 Node에 대해 무수히 많이 시행한다면, 그렇게 얻은 Random Walk 샘플들에는 네트워크의 전체적인 구조적인 정보가 담겨있다고 생각할 수 있습니다.\\\n                \n                수많은 Random Walk 샘플들을 문장으로, 그 안의 Node들을 단어로 간주하고, 언어 모델링 알고리즘인 Skipgram을 적용합니다.\\\n                어떤 Node의 주변 정보가 주어졌을 때, 그 Node의 vector 표현형의 우도를 목적함수로 삼습니다.\\\n                이 목적함수를 최대한 크게 하도록 vector 표현형들을 최적화하면, 네크워트의 구조적인 정보를 잘 반영한 Embedding을 얻는 것입니다.\\\n\n                그런데 이 목적함수를 계산하는 데 걸리는 시간이 네트워크 내 존재하는 node들의 숫자에 비례하기 때문에, 현실적으로 계산이 어렵습니다.\\\n                이 논문에서는 목적함수 계산에 Hierarchical Softmax를 도입해서, log(node들의 숫자)에 비례한 시간안에 계산을 해냅니다.\\\n        `\n        }\n    },\n    {\n        \"header\": { \"eng\": 'Implementing Deepwalk', \"kor\": 'Deepwalk 구현하기' },\n        \"content\": {\n            'type': 'paragraphs',\n            'eng': `\\\n                First, I've implemented a graph structure, class Graph.\\\n                It inherits PyTorch's Dataset class, and emits one of its nodes by a given index.\\\n                Furthermore, the Graph has a method that returns the adjacent nodes of the given node.\\\n\n                Second, class RandomWalker, kind of wrapper class of the class Graph, is implemented.\\\n                It also inherits PyTorch's Dataset class, and generates a random walk on the graph starting from the given node.\\\n                The author of the original paper has populated random walk samples before running Skipgram.\\\n                But in this project, the random walks can be sampled not only during training time also in parallel by using PyTorch.\\\n\n                Second, a BinaryTree class is implemented for hierarchical softmax. \\\n                While hierarchical softmax is an optmizing algorithm rather than a neural network architecture, \\\n                BinaryTree class inherits PyTorch's nn.Module class because trainable binary classifiers are allocated to each node in the tree.\\\n                The vertices of the graph are allocated to the leaf nodes from left, and then the trainable parameters of the leaf nodes are used as the optimized vector representation of the nodes.\\\n                The class finds a path from the root node to the target leaf node, then the path are used to indexing the classifiers.\\\n\n                Third, a Skipgram class is implemented.\\\n                While the author has used 'gensim' library to apply Skipgram, I implement it myself using PyTorch for practicing pursose.\\\n                It captures the local structure of the graph by sliding window on the random walk samples,\\\n                then populates pairs of the nodes collocating in the window.\\\n                Also, it updates the BinaryTree's parameter for the probabilty of being the pairs to be maximized.\\\n            `, 'kor': `\\\n                First, I've implemented a graph structure, class Graph.\\\n                It inherits PyTorch's Dataset class, and emits one of its nodes by a given index.\\\n                Furthermore, the Graph has a method that returns the adjacent nodes of the given node.\\\n\n                Second, class RandomWalker, kind of wrapper class of the class Graph, is implemented.\\\n                It also inherits PyTorch's Dataset class, and generates a random walk on the graph starting from the given node.\\\n                The author of the original paper has populated random walk samples before running Skipgram.\\\n                But in this project, the random walks can be sampled not only during training time also in parallel by using PyTorch.\\\n\n                Second, a BinaryTree class is implemented for hierarchical softmax. \\\n                While hierarchical softmax is an optmizing algorithm rather than a neural network architecture, \\\n                BinaryTree class inherits PyTorch's nn.Module class because trainable binary classifiers are allocated to each node in the tree.\\\n                The vertices of the graph are allocated to the leaf nodes from left, and then the trainable parameters of the leaf nodes are used as the optimized vector representation of the nodes.\\\n                The class finds a path from the root node to the target leaf node, then the path are used to indexing the classifiers.\\\n\n                Third, a Skipgram class is implemented.\\\n                While the author has used 'gensim' library to apply Skipgram, I implement it myself using PyTorch for practicing pursose.\\\n                It captures the local structure of the graph by sliding window on the random walk samples,\\\n                then populates pairs of the nodes collocating in the window.\\\n                Also, it updates the BinaryTree's parameter for the probabilty of being the pairs to be maximized.\\\n            `\n        }\n    },\n    {\n        \"header\": { 'eng': 'Conclusion', 'kor': ' 결론' },\n        \"content\": { 'type': 'list', 'eng': \"TBA\", 'kor': '추가예정' }\n    },\n]\n\nexport const plot = {\n    \"zachary\": [\n        ['x', \"Group A\", \"Group B\", \"Group C\", \"Group D\"],\n        [-3.8166658878326416, -0.5474966764450073, null, null, null],\n        [-2.6906471252441406, 0.59298175573349, null, null, null],\n        [-2.626798391342163, null, 1.170506238937378, null, null],\n        [-1.7017648220062256, 0.2615310847759247, null, null, null],\n        [-1.5637834072113037, null, null, -1.3880661725997925, null],\n        [-1.8370107412338257, null, null, -0.9987485408782959, null],\n        [-1.54941725730896, null, null, -0.6557814478874207, null],\n        [-1.2537076473236084, -0.5925015211105347, null, null, null],\n        [-1.5569331645965576, null, null, null, 0.08960134536027908],\n        [-1.2568892240524292, null, 0.07699773460626602, null, null],\n        [-1.0821958780288696, null, null, -1.3379249572753906, null],\n        [-1.2867532968521118, -0.9995964765548706, null, null, null],\n        [-1.2120288610458374, -0.8372260928153992, null, null, null],\n        [-1.2340707778930664, -0.05409325286746025, null, null, null],\n        [-0.07648933678865433, null, null, null, -0.4845717251300812],\n        [-0.4363250434398651, null, null, null, -0.34613025188446045],\n        [-1.29430091381073, null, null, -0.7885195016860962, null],\n        [-1.2804150581359863, 0.7749748826026917, null, null, null],\n        [0.16352751851081848, null, null, null, 0.38466426730155945],\n        [-1.3203083276748657, 0.2304065078496933, null, null, null],\n        [-0.9027239084243774, null, null, null, -0.12415960431098938],\n        [-1.3178577423095703, 0.4524197280406952, null, null, null],\n        [-0.8319980502128601, null, null, null, -0.7561876773834229],\n        [0.02225770801305771, null, null, null, 0.6341503262519836],\n        [-1.0112390518188477, null, 2.24466872215271, null, null],\n        [-0.5600841641426086, null, 1.824853539466858, null, null],\n        [0.7953892350196838, null, null, null, -1.6803532838821411],\n        [-0.7370090484619141, null, 1.6600260734558105, null, null],\n        [-1.03105628490448, null, 1.5013389587402344, null, null],\n        [0.8226757645606995, null, null, null, -1.197110891342163],\n        [-1.3952890634536743, null, null, null, -0.24407616257667542],\n        [-1.2003569602966309, null, 1.6307902336120605, null, null],\n        [-0.9227609038352966, null, null, null, 0.10339689254760742],\n        [-0.6735153794288635, null, null, null, -0.6007634997367859]]\n}","import { Grid, List, ListItem, Typography } from \"@mui/material\";\n\nexport function Content({ type, content, language }) {\n\n    if (type === 'list') {\n        var sentences = null;\n        if (language === 'KOR') {\n            sentences = content.kor.split('\\n')\n        } else {\n            sentences = content.eng.split('\\n')\n        }\n        return (\n            <Grid container component={List}>\n                {sentences.map((sentence, i) => (\n                    <Grid key={i} item xs={12} component={ListItem}>\n                        - {sentence}\n                    </Grid>\n                ))}\n            </Grid>\n        )\n    } else if (type === 'paragraphs') {\n        var paragraphs = null;\n        if (language === 'KOR') {\n            paragraphs = content.kor.split('\\n')\n        } else {\n            paragraphs = content.eng.split('\\n')\n        }\n        return (\n            <Grid container component={List}>\n                {paragraphs.map((paragraph, i) => (\n                    <Grid item key={i} xs={12} component={ListItem}>\n                        <Typography paragraph>\n                            {paragraph}\n                        </Typography>\n                    </Grid>\n                ))}\n            </Grid>\n        )\n    }\n}\n\n\n","import { useState } from 'react';\nimport { Box, Button, Grid, Fab, Typography } from \"@mui/material\";\nimport { GitHub } from \"@mui/icons-material\"\nimport { Plot } from \"./Plot\"\nimport { data, plot } from './data';\nimport { Content } from './Content.js';\n\nexport function Body() {\n    const [language, set_language] = useState('KOR')\n\n    const handleLanguage = () => {\n        if (language === 'KOR') {\n            set_language('ENG')\n        } else {\n            set_language('KOR')\n        }\n    }\n    return (\n        <Grid\n            container\n            component={Box}\n            sx={{\n                \"padding\": {\n                    \"xs\": '0 1rem',\n                    \"md\": '0 5rem',\n                    \"lg\": '0 30rem'\n                }\n            }}\n        >\n            <Fab\n                sx={{\n                    position: \"fixed\",\n                    bottom: { xs: '1rem', lg: '15rem' },\n                    right: { xs: '1rem', lg: '15rem' },\n                    zIndex: 1000,\n                }} onClick={handleLanguage}\n            >\n                {language}\n            </Fab>\n            <Grid item component={Typography} xs={12}\n                sx={{\n                    color: \"text.dark\",\n                    fontSize: {\n                        xs: \"2.5rem\",\n                        md: \"3rem\",\n                    },\n                    fontWeight: \"600\",\n                    lineHeight: {\n                        xs: \"2.5rem\",\n                        md: \"3rem\",\n                    },\n                    marginBottom: '1rem'\n                }}\n                container\n            >\n                <Grid item xs={12} md={'auto'}>\n                    Deepwalk-Clone\n                </Grid>\n                <Grid\n                    component={Button}\n                    sx={{\n                        marginLeft: \"2rem\",\n                        fontSize: \"2rem\",\n                        borderStyle: 'solid',\n                        borderWidth: '1px',\n                        borderColor: 'divider.dark',\n                        borderRadius: '5rem',\n                        \":hover\": { cursor: \"pointer\" }\n                    }}\n                    onClick={() => (window.location.href = \"https://github.com/helloybz/deepwalk-clone\")}\n                >\n                    <GitHub />\n                </Grid>\n\n            </Grid>\n            <Grid item xs={12} lg={12} sx={{\n                marginBottom: \"1rem\",\n                height: {\n                    xs: \"20rem\",\n                    lg: \"40rem\",\n                }\n            }}>\n                <Plot data={plot.zachary} title='Zachary Karate Club' />\n            </Grid>\n            {\n                data.map((section, i) => (\n                    <Grid item xs={12} key={i} sx={{\n                        marginBottom: \"1rem\"\n                    }}>\n                        <Typography\n                            variant='h2'\n                            sx={{\n                                color: 'rgb(243, 246, 249)',\n                                fontSize: '2rem',\n                                lineHeight: '2rem',\n                                marginBottom: '0.5rem',\n                                fontWeight: '1000'\n                            }}>\n                            {language === 'KOR' ? section.header.kor : section.header.eng}\n                        </Typography>\n                        <Typography\n                            sx={{\n                                color: 'rgb(243, 246, 249)',\n                                fontSize: '1.2rem',\n                            }}>\n                            <Content type={section.content.type} content={section.content} language={language} />\n                        </Typography>\n                    </Grid>\n                ))\n            }\n\n\n        </Grid >\n    )\n}","\nimport { Box } from \"@mui/material\";\nimport { Header, Body } from \"./components\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Box sx={{ marginTop: \"6rem\" }}>\n        <Body />\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from \"@mui/material\";\n\nexport const theme = createTheme({\n    palette: {\n        mode: \"dark\",\n        primary: {\n            main: \"#fff\",\n            dark: \"#fff\"\n        },\n        background: {\n            default: \"rgb(13, 25, 40)\",\n            dark: \"rgb(13, 25, 40)\"\n        },\n        text: {\n            dark: \"rgb(243, 246, 249)\"\n        },\n        divider: {\n            dark: \"rgb(24, 47, 75)\"\n        }\n    },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@mui/material';\n\nimport { theme } from './theme.js';\n\nReactDOM.render(\n  < React.StrictMode >\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}